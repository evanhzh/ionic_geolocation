{"version":3,"sources":["../../../src/@ionic-native/plugins/geofence/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,uBAAA,EAAyB,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACjG,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAI7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAsEG;AASH;IAA8B,4BAAiB;IAR/C;QAAA,qEAoFC;QA1EC,oBAAc,GAAG;YACf,KAAK,EAAE,CAAC;YACR,IAAI,EAAE,CAAC;YACP,IAAI,EAAE,CAAC;SACR,CAAC;;IAsEJ,CAAC;IApEC;;;OAGG;IAEH,uCAAoB,GAApB,cAA0C,MAAM,CAAC,CAAC,CAAC;IAAA,CAAC;IAEpD;;;;OAIG;IAEH,6BAAU,GAAV,cAA8B,MAAM,CAAC,CAAC,CAAC;IAAA,CAAC;IAExC;;;;OAIG;IAEH,8BAAW,GAAX,UAAY,SAAiC,IAAmB,MAAM,CAAC,CAAC,CAAC;IAAA,CAAC;IAE1E;;;;;OAKG;IAEH,yBAAM,GAAN,UAAO,UAAkC,IAAmB,MAAM,CAAC,CAAC,CAAC;IAAA,CAAC;IAEtE;;;;OAIG;IAEH,4BAAS,GAAT,cAA6B,MAAM,CAAC,CAAC,CAAC;IAAA,CAAC;IAEvC;;;;OAIG;IAEH,6BAAU,GAAV,cAAgC,MAAM,CAAC,CAAC,CAAC;IAAA,CAAC;IAE1C;;;;OAIG;IACH,wCAAqB,GAArB;QAEE,MAAM,CAAC,IAAI,UAAU,CAAM,UAAC,QAAQ;YAClC,MAAM,IAAI,MAAM,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,qBAAqB,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YACpG,MAAM,CAAC,cAAM,OAAA,MAAM,CAAC,QAAQ,CAAC,qBAAqB,GAAG,cAAQ,CAAC,EAAjD,CAAiD,CAAC;QACjE,CAAC,CAAC,CAAC;IAEL,CAAC;IAEI,mBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,uBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA9DA;QADC,uBAAuB,EAAE;;;wCACF,UAAU;wDAAiB;IAQnD;QADC,OAAO,EAAE;;;;8CAC6B;IAQvC;QADC,OAAO,EAAE;;yCACa,MAAM;;+CAA4C;IASzE;QADC,OAAO,EAAE;;;;0CAC2D;IAQrE;QADC,OAAO,EAAE;;;;6CAC4B;IAQtC;QADC,OAAO,EAAE;;;;8CAC+B;IAtD9B,QAAQ;QARpB,MAAM,CAAC;YACN,UAAU,EAAE,UAAU;YACtB,MAAM,EAAE,yBAAyB;YACjC,SAAS,EAAE,UAAU;YACrB,IAAI,EAAE,oDAAoD;YAC1D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,iBAAiB,CAAC;SAC5D,CAAC;OAEW,QAAQ,CA4EpB;IAAD,eAAC;CA5ED,AA4EC,CA5E6B,iBAAiB,GA4E9C;SA5EY,QAAQ","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, CordovaFunctionOverride, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\ndeclare const window: any;\n\n/**\n * @name Geofence\n * @description Monitors circular geofences around latitude/longitude coordinates, and sends a notification to the user when the boundary of a geofence is crossed. Notifications can be sent when the user enters and/or exits a geofence.\n * Geofences persist after device reboot. Geofences will be monitored even when the app is not running.\n * @usage\n * ```typescript\n * import { Geofence } from '@ionic-native/geofence';\n *\n * ...\n *\n * constructor(private geofence: Geofence) {\n *   // initialize the plugin\n *   geofence.initialize().then(\n *     // resolved promise does not return a value\n *     () => console.log('Geofence Plugin Ready'),\n *     (err) => console.log(err)\n *   )\n * }\n *\n * ...\n *\n * private addGeofence() {\n *   //options describing geofence\n *   let fence = {\n *     id: '69ca1b88-6fbe-4e80-a4d4-ff4d3748acdb', //any unique ID\n *     latitude:       37.285951, //center of geofence radius\n *     longitude:      -121.936650,\n *     radius:         100, //radius to edge of geofence in meters\n *     transitionType: 3, //see 'Transition Types' below\n *     notification: { //notification settings\n *         id:             1, //any unique ID\n *         title:          'You crossed a fence', //notification title\n *         text:           'You just arrived to Gliwice city center.', //notification body\n *         openAppOnClick: true //open app when notification is tapped\n *     }\n *   }\n *\n *   this.geofence.addOrUpdate(fence).then(\n *      () => console.log('Geofence added'),\n *      (err) => console.log('Geofence failed to add')\n *    );\n * }\n *\n * ```\n * ### Transition Types ###\n * Transition type specifies whether the geofence should trigger when the user enters and/or leaves the geofence.\n *\n * #### Supported values ####\n * - 1: Enter\n * - 2: Leave\n * - 3: Both\n *\n * ### Defining a Geofence ###\n * Geofences are defined by an object that is passed to `addOrUpdate()`. Object properties are:\n * - id: Any unique ID for the geofence. This ID is used to remove and update a geofence\n * - latitude: Latitude coordinate of the center of the geofence radius\n * - longitude: Latitude coordinate of the center of the geofence radius\n * - radius: Radius from the center to the edge of the geofence\n * - transitionType: Type of geofence transition to monitor for. See 'Transition Types' above\n * - notification: Object. Options for defining the notification sent when a geofence is crossed\n *   - id: Any unique ID\n *   - title: Notification title\n *   - text: Notification body\n *   - openAppOnClick: Boolean. Whether to open the app when the notification is tapped by the user\n *\n * ### Troubleshooting ###\n * #### I get compile errors when I run `ionic build ios` or `ionic run ios`. ####\n * This could be caused by the Cordova project directory in `/platforms/ios` not being named correctly.\n * Try running `ionic cordova platform rm <platform>` then run `ionic cordova platform add <platform>` to recreate the\n * platform directories.\n */\n@Plugin({\n  pluginName: 'Geofence',\n  plugin: 'cordova-plugin-geofence',\n  pluginRef: 'geofence',\n  repo: 'https://github.com/cowbell/cordova-plugin-geofence',\n  platforms: ['Android', 'iOS', 'Windows', 'Windows Phone 8']\n})\n\nexport class Geofence extends IonicNativePlugin {\n\n  TransitionType = {\n    ENTER: 1,\n    EXIT: 2,\n    BOTH: 3\n  };\n\n  /**\n   * Subscribe to get notified when a transition is received\n   * @return {Observable<any>}\n   */\n  @CordovaFunctionOverride()\n  onTransitionReceived(): Observable<any> { return; };\n\n  /**\n   * Initializes the plugin. User will be prompted to allow the app to use location and notifications.\n   *\n   * @returns {Promise<void>}\n   */\n  @Cordova()\n  initialize(): Promise<void> { return; };\n\n  /**\n   * Adds a new geofence or array of geofences. For geofence object, see above.\n   *\n   * @returns {Promise<void>}\n   */\n  @Cordova()\n  addOrUpdate(geofences: Object | Array<Object>): Promise<void> { return; };\n\n  /**\n   * Removes a geofence or array of geofences. `geofenceID` corresponds to one or more IDs specified when the\n   * geofence was created.\n   *\n   * @returns {Promise<void>}\n   */\n  @Cordova()\n  remove(geofenceId: string | Array<string>): Promise<void> { return; };\n\n  /**\n   * Removes all geofences.\n   *\n   * @returns {Promise<void>}\n   */\n  @Cordova()\n  removeAll(): Promise<void> { return; };\n\n  /**\n   * Returns an array of geofences currently being monitored.\n   *\n   * @returns {Promise<Array<string>>}\n   */\n  @Cordova()\n  getWatched(): Promise<string> { return; };\n\n  /**\n   * Called when the user clicks a geofence notification. iOS and Android only.\n   *\n   * @returns {Observable<any>}\n   */\n  onNotificationClicked(): Observable<any> {\n\n    return new Observable<any>((observer) => {\n      window && window.geofence && (window.geofence.onNotificationClicked = observer.next.bind(observer));\n      return () => window.geofence.onNotificationClicked = () => { };\n    });\n\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}